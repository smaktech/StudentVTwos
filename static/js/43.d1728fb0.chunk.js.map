{"version":3,"sources":["../node_modules/@mui/lab/TreeView/TreeViewContext.js","../node_modules/@mui/lab/TreeView/descendants.js","../node_modules/@mui/lab/TreeItem/treeItemClasses.js","../node_modules/@mui/lab/TreeItem/TreeItemContent.js","../node_modules/@mui/lab/TreeItem/useTreeItem.js","../node_modules/@mui/lab/TreeItem/TreeItem.js","../node_modules/@mui/lab/TreeView/treeViewClasses.js","../node_modules/@mui/lab/TreeView/TreeView.js"],"names":["TreeViewContext","React","_excluded","DescendantContext","noop","useDescendant","descendant","forceUpdate","registerDescendant","unregisterDescendant","descendants","parentId","index","array","comp","i","length","findIndex","item","element","previousDescendants","value","ref","current","usePrevious","someDescendantsHaveChanged","some","newDescendant","position","useEnhancedEffect","_extends","DescendantProvider","props","children","id","items","set","_ref","other","_objectWithoutPropertiesLoose","oldItems","newItems","start","end","middle","Math","floor","compareDocumentPosition","Node","DOCUMENT_POSITION_PRECEDING","binaryFindElement","newItem","slice","splice","forEach","filter","_jsx","Provider","getTreeItemUtilityClass","slot","generateUtilityClass","treeItemClasses","generateUtilityClasses","TreeItemContent","classes","className","displayIcon","expansionIcon","iconProp","icon","label","nodeId","onClick","onMouseDown","focus","isExpanded","isExpandable","isFocused","isDisabled","isSelected","multiSelect","selectNode","selectRange","toggleExpansion","expandable","expanded","focused","disabled","selected","handleExpansion","event","multiple","shiftKey","ctrlKey","metaKey","handleSelection","preventSelection","preventDefault","useTreeItem","_jsxs","clsx","root","iconContainer","TreeItemRoot","styled","name","overridesResolver","styles","listStyle","margin","padding","outline","StyledTreeItemContent","content","theme","width","display","alignItems","cursor","WebkitTapHighlightColor","backgroundColor","palette","action","hover","opacity","disabledOpacity","alpha","primary","main","selectedOpacity","hoverOpacity","focusOpacity","marginRight","flexShrink","justifyContent","fontSize","minWidth","paddingLeft","typography","body1","TreeItemGroup","Collapse","group","marginLeft","TreeItem","inProps","useThemeProps","collapseIcon","ContentComponent","ContentProps","endIcon","expandIcon","disabledProp","idProp","TransitionComponent","TransitionProps","icons","contextIcons","disabledItemsFocusable","mapFirstChar","unMapFirstChar","registerNode","unregisterNode","treeId","ariaSelected","treeitemElement","setTreeitemElement","contentRef","handleRef","useForkRef","Boolean","Array","isArray","ownerState","composeClasses","useUtilityClasses","defaultCollapseIcon","defaultExpandIcon","defaultParentIcon","defaultEndIcon","idAttribute","textContent","substring","toLowerCase","role","tabIndex","onFocus","target","currentTarget","ownerDocument","getElementById","preventScroll","unfocusable","as","unmountOnExit","in","component","getTreeViewUtilityClass","TreeViewRoot","findNextFirstChar","firstChars","startIndex","char","noopSelection","defaultDefaultExpanded","defaultDefaultSelected","TreeView","defaultExpanded","defaultSelected","disableSelection","expandedProp","onBlur","onKeyDown","onNodeFocus","onNodeSelect","onNodeToggle","selectedProp","isRtl","useTheme","direction","useId","treeRef","focusedNodeId","setFocusedNodeId","nodeMap","firstCharMap","useControlled","controlled","default","state","setExpandedState","setSelectedState","indexOf","node","getChildrenIds","Object","keys","map","key","sort","a","b","child","getNavigableChildrenIds","childrenIds","getNextNode","siblings","nextSibling","getPreviousNode","nodeIndex","currentNode","pop","getLastNode","lastNode","getFirstNode","getNodesInRange","nodeA","nodeB","nodeAId","nodeBId","aFamily","bFamily","aAncestor","bAncestor","aAncestorIsCommon","bAncestorIsCommon","continueA","continueB","push","commonAncestor","ancestorFamily","aSide","bSide","findOrderInTremauxTree","first","last","nodes","focusNextNode","newExpanded","concat","lastSelectedNode","lastSelectionWasRange","currentRangeSelection","handleRangeArrowSelect","base","next","handleRangeSelect","range","newSelected","handleMultipleSelect","handleSingleSelect","stacked","newMap","oldFocusedNodeId","activeElement","firstChar","handleNextArrow","handlePreviousArrow","parent","activeDescendant","flag","altKey","string","ctrlPressed","stopPropagation","selectNextNode","selectPreviousNode","focusPreviousNode","rangeSelectToFirst","focusFirstNode","rangeSelectToLast","focusLastNode","diff","expandAllSiblings","selectAllNodes","match","lowercaseChar","firstCharIds","visible","shouldBeSkipped","focusByFirstCharacter","firstSelected"],"mappings":"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","file":"static/js/43.d1728fb0.chunk.js","sourcesContent":["import * as React from 'react';\n/**\n * @ignore - internal component.\n */\n\nconst TreeViewContext = /*#__PURE__*/React.createContext({});\n\nif (process.env.NODE_ENV !== 'production') {\n  TreeViewContext.displayName = 'TreeViewContext';\n}\n\nexport default TreeViewContext;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"element\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/material/utils';\n/** Credit: https://github.com/reach/reach-ui/blob/86a046f54d53b6420e392b3fa56dd991d9d4e458/packages/descendants/README.md\n *  Modified slightly to suit our purposes.\n */\n// To replace with .findIndex() once we stop IE11 support.\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction findIndex(array, comp) {\n  for (let i = 0; i < array.length; i += 1) {\n    if (comp(array[i])) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nfunction binaryFindElement(array, element) {\n  let start = 0;\n  let end = array.length - 1;\n\n  while (start <= end) {\n    const middle = Math.floor((start + end) / 2);\n\n    if (array[middle].element === element) {\n      return middle;\n    } // eslint-disable-next-line no-bitwise\n\n\n    if (array[middle].element.compareDocumentPosition(element) & Node.DOCUMENT_POSITION_PRECEDING) {\n      end = middle - 1;\n    } else {\n      start = middle + 1;\n    }\n  }\n\n  return start;\n}\n\nconst DescendantContext = /*#__PURE__*/React.createContext({});\n\nif (process.env.NODE_ENV !== 'production') {\n  DescendantContext.displayName = 'DescendantContext';\n}\n\nfunction usePrevious(value) {\n  const ref = React.useRef(null);\n  React.useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n\nconst noop = () => {};\n/**\n * This hook registers our descendant by passing it into an array. We can then\n * search that array by to find its index when registering it in the component.\n * We use this for focus management, keyboard navigation, and typeahead\n * functionality for some components.\n *\n * The hook accepts the element node\n *\n * Our main goals with this are:\n *   1) maximum composability,\n *   2) minimal API friction\n *   3) SSR compatibility*\n *   4) concurrent safe\n *   5) index always up-to-date with the tree despite changes\n *   6) works with memoization of any component in the tree (hopefully)\n *\n * * As for SSR, the good news is that we don't actually need the index on the\n * server for most use-cases, as we are only using it to determine the order of\n * composed descendants for keyboard navigation.\n */\n\n\nexport function useDescendant(descendant) {\n  const [, forceUpdate] = React.useState();\n  const {\n    registerDescendant = noop,\n    unregisterDescendant = noop,\n    descendants = [],\n    parentId = null\n  } = React.useContext(DescendantContext); // This will initially return -1 because we haven't registered the descendant\n  // on the first render. After we register, this will then return the correct\n  // index on the following render and we will re-register descendants\n  // so that everything is up-to-date before the user interacts with a\n  // collection.\n\n  const index = findIndex(descendants, item => item.element === descendant.element);\n  const previousDescendants = usePrevious(descendants); // We also need to re-register descendants any time ANY of the other\n  // descendants have changed. My brain was melting when I wrote this and it\n  // feels a little off, but checking in render and using the result in the\n  // effect's dependency array works well enough.\n\n  const someDescendantsHaveChanged = descendants.some((newDescendant, position) => {\n    return previousDescendants && previousDescendants[position] && previousDescendants[position].element !== newDescendant.element;\n  }); // Prevent any flashing\n\n  useEnhancedEffect(() => {\n    if (descendant.element) {\n      registerDescendant(_extends({}, descendant, {\n        index\n      }));\n      return () => {\n        unregisterDescendant(descendant.element);\n      };\n    }\n\n    forceUpdate({});\n    return undefined;\n  }, [registerDescendant, unregisterDescendant, index, someDescendantsHaveChanged, descendant]);\n  return {\n    parentId,\n    index\n  };\n}\nexport function DescendantProvider(props) {\n  const {\n    children,\n    id\n  } = props;\n  const [items, set] = React.useState([]);\n  const registerDescendant = React.useCallback(_ref => {\n    let {\n      element\n    } = _ref,\n        other = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n    set(oldItems => {\n      let newItems;\n\n      if (oldItems.length === 0) {\n        // If there are no items, register at index 0 and bail.\n        return [_extends({}, other, {\n          element,\n          index: 0\n        })];\n      }\n\n      const index = binaryFindElement(oldItems, element);\n\n      if (oldItems[index] && oldItems[index].element === element) {\n        // If the element is already registered, just use the same array\n        newItems = oldItems;\n      } else {\n        // When registering a descendant, we need to make sure we insert in\n        // into the array in the same order that it appears in the DOM. So as\n        // new descendants are added or maybe some are removed, we always know\n        // that the array is up-to-date and correct.\n        //\n        // So here we look at our registered descendants and see if the new\n        // element we are adding appears earlier than an existing descendant's\n        // DOM node via `node.compareDocumentPosition`. If it does, we insert\n        // the new element at this index. Because `registerDescendant` will be\n        // called in an effect every time the descendants state value changes,\n        // we should be sure that this index is accurate when descendent\n        // elements come or go from our component.\n        const newItem = _extends({}, other, {\n          element,\n          index\n        }); // If an index is not found we will push the element to the end.\n\n\n        newItems = oldItems.slice();\n        newItems.splice(index, 0, newItem);\n      }\n\n      newItems.forEach((item, position) => {\n        item.index = position;\n      });\n      return newItems;\n    });\n  }, []);\n  const unregisterDescendant = React.useCallback(element => {\n    set(oldItems => oldItems.filter(item => element !== item.element));\n  }, []);\n  const value = React.useMemo(() => ({\n    descendants: items,\n    registerDescendant,\n    unregisterDescendant,\n    parentId: id\n  }), [items, registerDescendant, unregisterDescendant, id]);\n  return /*#__PURE__*/_jsx(DescendantContext.Provider, {\n    value: value,\n    children: children\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? DescendantProvider.propTypes = {\n  children: PropTypes.node,\n  id: PropTypes.string\n} : void 0;","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getTreeItemUtilityClass(slot) {\n  return generateUtilityClass('MuiTreeItem', slot);\n}\nconst treeItemClasses = generateUtilityClasses('MuiTreeItem', ['root', 'group', 'content', 'expanded', 'selected', 'focused', 'disabled', 'iconContainer', 'label']);\nexport default treeItemClasses;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"classes\", \"className\", \"displayIcon\", \"expansionIcon\", \"icon\", \"label\", \"nodeId\", \"onClick\", \"onMouseDown\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport useTreeItem from './useTreeItem';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst TreeItemContent = /*#__PURE__*/React.forwardRef(function TreeItemContent(props, ref) {\n  const {\n    classes,\n    className,\n    displayIcon,\n    expansionIcon,\n    icon: iconProp,\n    label,\n    nodeId,\n    onClick,\n    onMouseDown\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const {\n    disabled,\n    expanded,\n    selected,\n    focused,\n    handleExpansion,\n    handleSelection,\n    preventSelection\n  } = useTreeItem(nodeId);\n  const icon = iconProp || expansionIcon || displayIcon;\n\n  const handleMouseDown = event => {\n    preventSelection(event);\n\n    if (onMouseDown) {\n      onMouseDown(event);\n    }\n  };\n\n  const handleClick = event => {\n    handleExpansion(event);\n    handleSelection(event);\n\n    if (onClick) {\n      onClick(event);\n    }\n  };\n\n  return (\n    /*#__PURE__*/\n\n    /* eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions -- Key event is handled by the TreeView */\n    _jsxs(\"div\", _extends({\n      className: clsx(className, classes.root, expanded && classes.expanded, selected && classes.selected, focused && classes.focused, disabled && classes.disabled),\n      onClick: handleClick,\n      onMouseDown: handleMouseDown,\n      ref: ref\n    }, other, {\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: classes.iconContainer,\n        children: icon\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: classes.label,\n        children: label\n      })]\n    }))\n  );\n});\nprocess.env.NODE_ENV !== \"production\" ? TreeItemContent.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * className applied to the root element.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The icon to display next to the tree node's label. Either a parent or end icon.\n   */\n  displayIcon: PropTypes.node,\n\n  /**\n   * The icon to display next to the tree node's label. Either an expansion or collapse icon.\n   */\n  expansionIcon: PropTypes.node,\n\n  /**\n   * The icon to display next to the tree node's label.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The tree node label.\n   */\n  label: PropTypes.node,\n\n  /**\n   * The id of the node.\n   */\n  nodeId: PropTypes.string.isRequired,\n\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onMouseDown: PropTypes.func\n} : void 0;\nexport default TreeItemContent;","import * as React from 'react';\nimport TreeViewContext from '../TreeView/TreeViewContext';\nexport default function useTreeItem(nodeId) {\n  const {\n    focus,\n    isExpanded,\n    isExpandable,\n    isFocused,\n    isDisabled,\n    isSelected,\n    multiSelect,\n    selectNode,\n    selectRange,\n    toggleExpansion\n  } = React.useContext(TreeViewContext);\n  const expandable = isExpandable ? isExpandable(nodeId) : false;\n  const expanded = isExpanded ? isExpanded(nodeId) : false;\n  const focused = isFocused ? isFocused(nodeId) : false;\n  const disabled = isDisabled ? isDisabled(nodeId) : false;\n  const selected = isSelected ? isSelected(nodeId) : false;\n\n  const handleExpansion = event => {\n    if (!disabled) {\n      if (!focused) {\n        focus(event, nodeId);\n      }\n\n      const multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey); // If already expanded and trying to toggle selection don't close\n\n      if (expandable && !(multiple && isExpanded(nodeId))) {\n        toggleExpansion(event, nodeId);\n      }\n    }\n  };\n\n  const handleSelection = event => {\n    if (!disabled) {\n      if (!focused) {\n        focus(event, nodeId);\n      }\n\n      const multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey);\n\n      if (multiple) {\n        if (event.shiftKey) {\n          selectRange(event, {\n            end: nodeId\n          });\n        } else {\n          selectNode(event, nodeId, true);\n        }\n      } else {\n        selectNode(event, nodeId);\n      }\n    }\n  };\n\n  const preventSelection = event => {\n    if (event.shiftKey || event.ctrlKey || event.metaKey || disabled) {\n      // Prevent text selection\n      event.preventDefault();\n    }\n  };\n\n  return {\n    disabled,\n    expanded,\n    selected,\n    focused,\n    handleExpansion,\n    handleSelection,\n    preventSelection\n  };\n}","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"children\", \"className\", \"collapseIcon\", \"ContentComponent\", \"ContentProps\", \"endIcon\", \"expandIcon\", \"disabled\", \"icon\", \"id\", \"label\", \"nodeId\", \"onClick\", \"onMouseDown\", \"TransitionComponent\", \"TransitionProps\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { elementTypeAcceptingRef } from '@mui/utils';\nimport Collapse from '@mui/material/Collapse';\nimport { alpha, styled, useThemeProps } from '@mui/material/styles';\nimport { ownerDocument, useForkRef, unsupportedProp } from '@mui/material/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport TreeViewContext from '../TreeView/TreeViewContext';\nimport { DescendantProvider, useDescendant } from '../TreeView/descendants';\nimport TreeItemContent from './TreeItemContent';\nimport treeItemClasses, { getTreeItemUtilityClass } from './treeItemClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    content: ['content'],\n    expanded: ['expanded'],\n    selected: ['selected'],\n    focused: ['focused'],\n    disabled: ['disabled'],\n    iconContainer: ['iconContainer'],\n    label: ['label'],\n    group: ['group']\n  };\n  return composeClasses(slots, getTreeItemUtilityClass, classes);\n};\n\nconst TreeItemRoot = styled('li', {\n  name: 'MuiTreeItem',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  listStyle: 'none',\n  margin: 0,\n  padding: 0,\n  outline: 0\n});\nconst StyledTreeItemContent = styled(TreeItemContent, {\n  name: 'MuiTreeItem',\n  slot: 'Content',\n  overridesResolver: (props, styles) => {\n    return [styles.content, styles.iconContainer && {\n      [`& .${treeItemClasses.iconContainer}`]: styles.iconContainer\n    }, styles.label && {\n      [`& .${treeItemClasses.label}`]: styles.label\n    }];\n  }\n})(({\n  theme\n}) => ({\n  padding: '0 8px',\n  width: '100%',\n  display: 'flex',\n  alignItems: 'center',\n  cursor: 'pointer',\n  WebkitTapHighlightColor: 'transparent',\n  '&:hover': {\n    backgroundColor: theme.palette.action.hover,\n    // Reset on touch devices, it doesn't add specificity\n    '@media (hover: none)': {\n      backgroundColor: 'transparent'\n    }\n  },\n  [`&.${treeItemClasses.disabled}`]: {\n    opacity: theme.palette.action.disabledOpacity,\n    backgroundColor: 'transparent'\n  },\n  [`&.${treeItemClasses.focused}`]: {\n    backgroundColor: theme.palette.action.focus\n  },\n  [`&.${treeItemClasses.selected}`]: {\n    backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n    '&:hover': {\n      backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)\n      }\n    },\n    [`&.${treeItemClasses.focused}`]: {\n      backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)\n    }\n  },\n  [`& .${treeItemClasses.iconContainer}`]: {\n    marginRight: 4,\n    width: 15,\n    display: 'flex',\n    flexShrink: 0,\n    justifyContent: 'center',\n    '& svg': {\n      fontSize: 18\n    }\n  },\n  [`& .${treeItemClasses.label}`]: _extends({\n    width: '100%',\n    // fixes overflow - see https://github.com/mui-org/material-ui/issues/27372\n    minWidth: 0,\n    paddingLeft: 4,\n    position: 'relative'\n  }, theme.typography.body1)\n}));\nconst TreeItemGroup = styled(Collapse, {\n  name: 'MuiTreeItem',\n  slot: 'Group',\n  overridesResolver: (props, styles) => styles.group\n})({\n  margin: 0,\n  padding: 0,\n  marginLeft: 17\n});\nconst TreeItem = /*#__PURE__*/React.forwardRef(function TreeItem(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiTreeItem'\n  });\n\n  const {\n    children,\n    className,\n    collapseIcon,\n    ContentComponent = TreeItemContent,\n    ContentProps,\n    endIcon,\n    expandIcon,\n    disabled: disabledProp,\n    icon,\n    id: idProp,\n    label,\n    nodeId,\n    onClick,\n    onMouseDown,\n    TransitionComponent = Collapse,\n    TransitionProps\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const {\n    icons: contextIcons = {},\n    focus,\n    isExpanded,\n    isFocused,\n    isSelected,\n    isDisabled,\n    multiSelect,\n    disabledItemsFocusable,\n    mapFirstChar,\n    unMapFirstChar,\n    registerNode,\n    unregisterNode,\n    treeId\n  } = React.useContext(TreeViewContext);\n  let id = null;\n\n  if (idProp != null) {\n    id = idProp;\n  } else if (treeId && nodeId) {\n    id = `${treeId}-${nodeId}`;\n  }\n\n  const [treeitemElement, setTreeitemElement] = React.useState(null);\n  const contentRef = React.useRef(null);\n  const handleRef = useForkRef(setTreeitemElement, ref);\n  const descendant = React.useMemo(() => ({\n    element: treeitemElement,\n    id: nodeId\n  }), [nodeId, treeitemElement]);\n  const {\n    index,\n    parentId\n  } = useDescendant(descendant);\n  const expandable = Boolean(Array.isArray(children) ? children.length : children);\n  const expanded = isExpanded ? isExpanded(nodeId) : false;\n  const focused = isFocused ? isFocused(nodeId) : false;\n  const selected = isSelected ? isSelected(nodeId) : false;\n  const disabled = isDisabled ? isDisabled(nodeId) : false;\n\n  const ownerState = _extends({}, props, {\n    expanded,\n    focused,\n    selected,\n    disabled\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  let displayIcon;\n  let expansionIcon;\n\n  if (expandable) {\n    if (!expanded) {\n      expansionIcon = expandIcon || contextIcons.defaultExpandIcon;\n    } else {\n      expansionIcon = collapseIcon || contextIcons.defaultCollapseIcon;\n    }\n  }\n\n  if (expandable) {\n    displayIcon = contextIcons.defaultParentIcon;\n  } else {\n    displayIcon = endIcon || contextIcons.defaultEndIcon;\n  }\n\n  React.useEffect(() => {\n    // On the first render a node's index will be -1. We want to wait for the real index.\n    if (registerNode && unregisterNode && index !== -1) {\n      registerNode({\n        id: nodeId,\n        idAttribute: id,\n        index,\n        parentId,\n        expandable,\n        disabled: disabledProp\n      });\n      return () => {\n        unregisterNode(nodeId);\n      };\n    }\n\n    return undefined;\n  }, [registerNode, unregisterNode, parentId, index, nodeId, expandable, disabledProp, id]);\n  React.useEffect(() => {\n    if (mapFirstChar && unMapFirstChar && label) {\n      mapFirstChar(nodeId, contentRef.current.textContent.substring(0, 1).toLowerCase());\n      return () => {\n        unMapFirstChar(nodeId);\n      };\n    }\n\n    return undefined;\n  }, [mapFirstChar, unMapFirstChar, nodeId, label]);\n  let ariaSelected;\n\n  if (multiSelect) {\n    ariaSelected = selected;\n  } else if (selected) {\n    /* single-selection trees unset aria-selected on un-selected items.\n     *\n     * If the tree does not support multiple selection, aria-selected\n     * is set to true for the selected node and it is not present on any other node in the tree.\n     * Source: https://www.w3.org/TR/wai-aria-practices/#TreeView\n     */\n    ariaSelected = true;\n  }\n\n  function handleFocus(event) {\n    // DOM focus stays on the tree which manages focus with aria-activedescendant\n    if (event.target === event.currentTarget) {\n      ownerDocument(event.target).getElementById(treeId).focus({\n        preventScroll: true\n      });\n    }\n\n    const unfocusable = !disabledItemsFocusable && disabled;\n\n    if (!focused && event.currentTarget === event.target && !unfocusable) {\n      focus(event, nodeId);\n    }\n  }\n\n  return /*#__PURE__*/_jsxs(TreeItemRoot, _extends({\n    className: clsx(classes.root, className),\n    role: \"treeitem\",\n    \"aria-expanded\": expandable ? expanded : null,\n    \"aria-selected\": ariaSelected,\n    \"aria-disabled\": disabled || null,\n    ref: handleRef,\n    id: id,\n    tabIndex: -1\n  }, other, {\n    ownerState: ownerState,\n    onFocus: handleFocus,\n    children: [/*#__PURE__*/_jsx(StyledTreeItemContent, _extends({\n      as: ContentComponent,\n      ref: contentRef,\n      classes: {\n        root: classes.content,\n        expanded: classes.expanded,\n        selected: classes.selected,\n        focused: classes.focused,\n        disabled: classes.disabled,\n        iconContainer: classes.iconContainer,\n        label: classes.label\n      },\n      label: label,\n      nodeId: nodeId,\n      onClick: onClick,\n      onMouseDown: onMouseDown,\n      icon: icon,\n      expansionIcon: expansionIcon,\n      displayIcon: displayIcon,\n      ownerState: ownerState\n    }, ContentProps)), children && /*#__PURE__*/_jsx(DescendantProvider, {\n      id: nodeId,\n      children: /*#__PURE__*/_jsx(TreeItemGroup, _extends({\n        as: TransitionComponent,\n        unmountOnExit: true,\n        className: classes.group,\n        in: expanded,\n        component: \"ul\",\n        role: \"group\"\n      }, TransitionProps, {\n        children: children\n      }))\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TreeItem.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The icon used to collapse the node.\n   */\n  collapseIcon: PropTypes.node,\n\n  /**\n   * The component used for the content node.\n   * @default TreeItemContent\n   */\n  ContentComponent: elementTypeAcceptingRef,\n\n  /**\n   * Props applied to ContentComponent\n   */\n  ContentProps: PropTypes.object,\n\n  /**\n   * If `true`, the node is disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * The icon displayed next to a end node.\n   */\n  endIcon: PropTypes.node,\n\n  /**\n   * The icon used to expand the node.\n   */\n  expandIcon: PropTypes.node,\n\n  /**\n   * The icon to display next to the tree node's label.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  id: PropTypes.string,\n\n  /**\n   * The tree node label.\n   */\n  label: PropTypes.node,\n\n  /**\n   * The id of the node.\n   */\n  nodeId: PropTypes.string.isRequired,\n\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * This prop isn't supported.\n   * Use the `onNodeFocus` callback on the tree if you need to monitor a node's focus.\n   */\n  onFocus: unsupportedProp,\n\n  /**\n   * @ignore\n   */\n  onMouseDown: PropTypes.func,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * The component used for the transition.\n   * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.\n   * @default Collapse\n   */\n  TransitionComponent: PropTypes.elementType,\n\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition) component.\n   */\n  TransitionProps: PropTypes.object\n} : void 0;\nexport default TreeItem;","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getTreeViewUtilityClass(slot) {\n  return generateUtilityClass('MuiTreeView', slot);\n}\nconst treeViewClasses = generateUtilityClasses('MuiTreeView', ['root']);\nexport default treeViewClasses;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"children\", \"className\", \"defaultCollapseIcon\", \"defaultEndIcon\", \"defaultExpanded\", \"defaultExpandIcon\", \"defaultParentIcon\", \"defaultSelected\", \"disabledItemsFocusable\", \"disableSelection\", \"expanded\", \"id\", \"multiSelect\", \"onBlur\", \"onFocus\", \"onKeyDown\", \"onNodeFocus\", \"onNodeSelect\", \"onNodeToggle\", \"selected\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { styled, useTheme, useThemeProps } from '@mui/material/styles';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { useControlled, useForkRef, ownerDocument, unstable_useId as useId } from '@mui/material/utils';\nimport TreeViewContext from './TreeViewContext';\nimport { DescendantProvider } from './descendants';\nimport { getTreeViewUtilityClass } from './treeViewClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTreeViewUtilityClass, classes);\n};\n\nconst TreeViewRoot = styled('ul', {\n  name: 'MuiTreeView',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  padding: 0,\n  margin: 0,\n  listStyle: 'none',\n  outline: 0\n});\n\nfunction isPrintableCharacter(string) {\n  return string && string.length === 1 && string.match(/\\S/);\n}\n\nfunction findNextFirstChar(firstChars, startIndex, char) {\n  for (let i = startIndex; i < firstChars.length; i += 1) {\n    if (char === firstChars[i]) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nfunction noopSelection() {\n  return false;\n}\n\nconst defaultDefaultExpanded = [];\nconst defaultDefaultSelected = [];\nconst TreeView = /*#__PURE__*/React.forwardRef(function TreeView(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiTreeView'\n  });\n\n  const {\n    children,\n    className,\n    defaultCollapseIcon,\n    defaultEndIcon,\n    defaultExpanded = defaultDefaultExpanded,\n    defaultExpandIcon,\n    defaultParentIcon,\n    defaultSelected = defaultDefaultSelected,\n    disabledItemsFocusable = false,\n    disableSelection = false,\n    expanded: expandedProp,\n    id: idProp,\n    multiSelect = false,\n    onBlur,\n    onFocus,\n    onKeyDown,\n    onNodeFocus,\n    onNodeSelect,\n    onNodeToggle,\n    selected: selectedProp\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const theme = useTheme();\n  const isRtl = theme.direction === 'rtl';\n\n  const ownerState = _extends({}, props, {\n    defaultExpanded,\n    defaultSelected,\n    disabledItemsFocusable,\n    disableSelection,\n    multiSelect\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  const treeId = useId(idProp);\n  const treeRef = React.useRef(null);\n  const handleRef = useForkRef(treeRef, ref);\n  const [focusedNodeId, setFocusedNodeId] = React.useState(null);\n  const nodeMap = React.useRef({});\n  const firstCharMap = React.useRef({});\n  const [expanded, setExpandedState] = useControlled({\n    controlled: expandedProp,\n    default: defaultExpanded,\n    name: 'TreeView',\n    state: 'expanded'\n  });\n  const [selected, setSelectedState] = useControlled({\n    controlled: selectedProp,\n    default: defaultSelected,\n    name: 'TreeView',\n    state: 'selected'\n  });\n  /*\n   * Status Helpers\n   */\n\n  const isExpanded = React.useCallback(id => Array.isArray(expanded) ? expanded.indexOf(id) !== -1 : false, [expanded]);\n  const isExpandable = React.useCallback(id => nodeMap.current[id] && nodeMap.current[id].expandable, []);\n  const isSelected = React.useCallback(id => Array.isArray(selected) ? selected.indexOf(id) !== -1 : selected === id, [selected]);\n  const isDisabled = React.useCallback(id => {\n    let node = nodeMap.current[id]; // This can be called before the node has been added to the node map.\n\n    if (!node) {\n      return false;\n    }\n\n    if (node.disabled) {\n      return true;\n    }\n\n    while (node.parentId != null) {\n      node = nodeMap.current[node.parentId];\n\n      if (node.disabled) {\n        return true;\n      }\n    }\n\n    return false;\n  }, []);\n\n  const isFocused = id => focusedNodeId === id;\n  /*\n   * Child Helpers\n   */\n  // Using Object.keys -> .map to mimic Object.values we should replace with Object.values() once we stop IE11 support.\n\n\n  const getChildrenIds = id => Object.keys(nodeMap.current).map(key => {\n    return nodeMap.current[key];\n  }).filter(node => node.parentId === id).sort((a, b) => a.index - b.index).map(child => child.id);\n\n  const getNavigableChildrenIds = id => {\n    let childrenIds = getChildrenIds(id);\n\n    if (!disabledItemsFocusable) {\n      childrenIds = childrenIds.filter(node => !isDisabled(node));\n    }\n\n    return childrenIds;\n  };\n  /*\n   * Node Helpers\n   */\n\n\n  const getNextNode = id => {\n    // If expanded get first child\n    if (isExpanded(id) && getNavigableChildrenIds(id).length > 0) {\n      return getNavigableChildrenIds(id)[0];\n    }\n\n    let node = nodeMap.current[id];\n\n    while (node != null) {\n      // Try to get next sibling\n      const siblings = getNavigableChildrenIds(node.parentId);\n      const nextSibling = siblings[siblings.indexOf(node.id) + 1];\n\n      if (nextSibling) {\n        return nextSibling;\n      } // If the sibling does not exist, go up a level to the parent and try again.\n\n\n      node = nodeMap.current[node.parentId];\n    }\n\n    return null;\n  };\n\n  const getPreviousNode = id => {\n    const node = nodeMap.current[id];\n    const siblings = getNavigableChildrenIds(node.parentId);\n    const nodeIndex = siblings.indexOf(id);\n\n    if (nodeIndex === 0) {\n      return node.parentId;\n    }\n\n    let currentNode = siblings[nodeIndex - 1];\n\n    while (isExpanded(currentNode) && getNavigableChildrenIds(currentNode).length > 0) {\n      currentNode = getNavigableChildrenIds(currentNode).pop();\n    }\n\n    return currentNode;\n  };\n\n  const getLastNode = () => {\n    let lastNode = getNavigableChildrenIds(null).pop();\n\n    while (isExpanded(lastNode)) {\n      lastNode = getNavigableChildrenIds(lastNode).pop();\n    }\n\n    return lastNode;\n  };\n\n  const getFirstNode = () => getNavigableChildrenIds(null)[0];\n\n  const getParent = id => nodeMap.current[id].parentId;\n  /**\n   * This is used to determine the start and end of a selection range so\n   * we can get the nodes between the two border nodes.\n   *\n   * It finds the nodes' common ancestor using\n   * a naive implementation of a lowest common ancestor algorithm\n   * (https://en.wikipedia.org/wiki/Lowest_common_ancestor).\n   * Then compares the ancestor's 2 children that are ancestors of nodeA and NodeB\n   * so we can compare their indexes to work out which node comes first in a depth first search.\n   * (https://en.wikipedia.org/wiki/Depth-first_search)\n   *\n   * Another way to put it is which node is shallower in a trémaux tree\n   * https://en.wikipedia.org/wiki/Tr%C3%A9maux_tree\n   */\n\n\n  const findOrderInTremauxTree = (nodeAId, nodeBId) => {\n    if (nodeAId === nodeBId) {\n      return [nodeAId, nodeBId];\n    }\n\n    const nodeA = nodeMap.current[nodeAId];\n    const nodeB = nodeMap.current[nodeBId];\n\n    if (nodeA.parentId === nodeB.id || nodeB.parentId === nodeA.id) {\n      return nodeB.parentId === nodeA.id ? [nodeA.id, nodeB.id] : [nodeB.id, nodeA.id];\n    }\n\n    const aFamily = [nodeA.id];\n    const bFamily = [nodeB.id];\n    let aAncestor = nodeA.parentId;\n    let bAncestor = nodeB.parentId;\n    let aAncestorIsCommon = bFamily.indexOf(aAncestor) !== -1;\n    let bAncestorIsCommon = aFamily.indexOf(bAncestor) !== -1;\n    let continueA = true;\n    let continueB = true;\n\n    while (!bAncestorIsCommon && !aAncestorIsCommon) {\n      if (continueA) {\n        aFamily.push(aAncestor);\n        aAncestorIsCommon = bFamily.indexOf(aAncestor) !== -1;\n        continueA = aAncestor !== null;\n\n        if (!aAncestorIsCommon && continueA) {\n          aAncestor = nodeMap.current[aAncestor].parentId;\n        }\n      }\n\n      if (continueB && !aAncestorIsCommon) {\n        bFamily.push(bAncestor);\n        bAncestorIsCommon = aFamily.indexOf(bAncestor) !== -1;\n        continueB = bAncestor !== null;\n\n        if (!bAncestorIsCommon && continueB) {\n          bAncestor = nodeMap.current[bAncestor].parentId;\n        }\n      }\n    }\n\n    const commonAncestor = aAncestorIsCommon ? aAncestor : bAncestor;\n    const ancestorFamily = getChildrenIds(commonAncestor);\n    const aSide = aFamily[aFamily.indexOf(commonAncestor) - 1];\n    const bSide = bFamily[bFamily.indexOf(commonAncestor) - 1];\n    return ancestorFamily.indexOf(aSide) < ancestorFamily.indexOf(bSide) ? [nodeAId, nodeBId] : [nodeBId, nodeAId];\n  };\n\n  const getNodesInRange = (nodeA, nodeB) => {\n    const [first, last] = findOrderInTremauxTree(nodeA, nodeB);\n    const nodes = [first];\n    let current = first;\n\n    while (current !== last) {\n      current = getNextNode(current);\n      nodes.push(current);\n    }\n\n    return nodes;\n  };\n  /*\n   * Focus Helpers\n   */\n\n\n  const focus = (event, id) => {\n    if (id) {\n      setFocusedNodeId(id);\n\n      if (onNodeFocus) {\n        onNodeFocus(event, id);\n      }\n    }\n  };\n\n  const focusNextNode = (event, id) => focus(event, getNextNode(id));\n\n  const focusPreviousNode = (event, id) => focus(event, getPreviousNode(id));\n\n  const focusFirstNode = event => focus(event, getFirstNode());\n\n  const focusLastNode = event => focus(event, getLastNode());\n\n  const focusByFirstCharacter = (event, id, char) => {\n    let start;\n    let index;\n    const lowercaseChar = char.toLowerCase();\n    const firstCharIds = [];\n    const firstChars = []; // This really only works since the ids are strings\n\n    Object.keys(firstCharMap.current).forEach(nodeId => {\n      const firstChar = firstCharMap.current[nodeId];\n      const map = nodeMap.current[nodeId];\n      const visible = map.parentId ? isExpanded(map.parentId) : true;\n      const shouldBeSkipped = disabledItemsFocusable ? false : isDisabled(nodeId);\n\n      if (visible && !shouldBeSkipped) {\n        firstCharIds.push(nodeId);\n        firstChars.push(firstChar);\n      }\n    }); // Get start index for search based on position of currentItem\n\n    start = firstCharIds.indexOf(id) + 1;\n\n    if (start >= firstCharIds.length) {\n      start = 0;\n    } // Check remaining slots in the menu\n\n\n    index = findNextFirstChar(firstChars, start, lowercaseChar); // If not found in remaining slots, check from beginning\n\n    if (index === -1) {\n      index = findNextFirstChar(firstChars, 0, lowercaseChar);\n    } // If match was found...\n\n\n    if (index > -1) {\n      focus(event, firstCharIds[index]);\n    }\n  };\n  /*\n   * Expansion Helpers\n   */\n\n\n  const toggleExpansion = (event, value = focusedNodeId) => {\n    let newExpanded;\n\n    if (expanded.indexOf(value) !== -1) {\n      newExpanded = expanded.filter(id => id !== value);\n    } else {\n      newExpanded = [value].concat(expanded);\n    }\n\n    if (onNodeToggle) {\n      onNodeToggle(event, newExpanded);\n    }\n\n    setExpandedState(newExpanded);\n  };\n\n  const expandAllSiblings = (event, id) => {\n    const map = nodeMap.current[id];\n    const siblings = getChildrenIds(map.parentId);\n    const diff = siblings.filter(child => isExpandable(child) && !isExpanded(child));\n    const newExpanded = expanded.concat(diff);\n\n    if (diff.length > 0) {\n      setExpandedState(newExpanded);\n\n      if (onNodeToggle) {\n        onNodeToggle(event, newExpanded);\n      }\n    }\n  };\n  /*\n   * Selection Helpers\n   */\n\n\n  const lastSelectedNode = React.useRef(null);\n  const lastSelectionWasRange = React.useRef(false);\n  const currentRangeSelection = React.useRef([]);\n\n  const handleRangeArrowSelect = (event, nodes) => {\n    let base = selected.slice();\n    const {\n      start,\n      next,\n      current\n    } = nodes;\n\n    if (!next || !current) {\n      return;\n    }\n\n    if (currentRangeSelection.current.indexOf(current) === -1) {\n      currentRangeSelection.current = [];\n    }\n\n    if (lastSelectionWasRange.current) {\n      if (currentRangeSelection.current.indexOf(next) !== -1) {\n        base = base.filter(id => id === start || id !== current);\n        currentRangeSelection.current = currentRangeSelection.current.filter(id => id === start || id !== current);\n      } else {\n        base.push(next);\n        currentRangeSelection.current.push(next);\n      }\n    } else {\n      base.push(next);\n      currentRangeSelection.current.push(current, next);\n    }\n\n    if (onNodeSelect) {\n      onNodeSelect(event, base);\n    }\n\n    setSelectedState(base);\n  };\n\n  const handleRangeSelect = (event, nodes) => {\n    let base = selected.slice();\n    const {\n      start,\n      end\n    } = nodes; // If last selection was a range selection ignore nodes that were selected.\n\n    if (lastSelectionWasRange.current) {\n      base = base.filter(id => currentRangeSelection.current.indexOf(id) === -1);\n    }\n\n    let range = getNodesInRange(start, end);\n    range = range.filter(node => !isDisabled(node));\n    currentRangeSelection.current = range;\n    let newSelected = base.concat(range);\n    newSelected = newSelected.filter((id, i) => newSelected.indexOf(id) === i);\n\n    if (onNodeSelect) {\n      onNodeSelect(event, newSelected);\n    }\n\n    setSelectedState(newSelected);\n  };\n\n  const handleMultipleSelect = (event, value) => {\n    let newSelected;\n\n    if (selected.indexOf(value) !== -1) {\n      newSelected = selected.filter(id => id !== value);\n    } else {\n      newSelected = [value].concat(selected);\n    }\n\n    if (onNodeSelect) {\n      onNodeSelect(event, newSelected);\n    }\n\n    setSelectedState(newSelected);\n  };\n\n  const handleSingleSelect = (event, value) => {\n    const newSelected = multiSelect ? [value] : value;\n\n    if (onNodeSelect) {\n      onNodeSelect(event, newSelected);\n    }\n\n    setSelectedState(newSelected);\n  };\n\n  const selectNode = (event, id, multiple = false) => {\n    if (id) {\n      if (multiple) {\n        handleMultipleSelect(event, id);\n      } else {\n        handleSingleSelect(event, id);\n      }\n\n      lastSelectedNode.current = id;\n      lastSelectionWasRange.current = false;\n      currentRangeSelection.current = [];\n      return true;\n    }\n\n    return false;\n  };\n\n  const selectRange = (event, nodes, stacked = false) => {\n    const {\n      start = lastSelectedNode.current,\n      end,\n      current\n    } = nodes;\n\n    if (stacked) {\n      handleRangeArrowSelect(event, {\n        start,\n        next: end,\n        current\n      });\n    } else if (start != null && end != null) {\n      handleRangeSelect(event, {\n        start,\n        end\n      });\n    }\n\n    lastSelectionWasRange.current = true;\n  };\n\n  const rangeSelectToFirst = (event, id) => {\n    if (!lastSelectedNode.current) {\n      lastSelectedNode.current = id;\n    }\n\n    const start = lastSelectionWasRange.current ? lastSelectedNode.current : id;\n    selectRange(event, {\n      start,\n      end: getFirstNode()\n    });\n  };\n\n  const rangeSelectToLast = (event, id) => {\n    if (!lastSelectedNode.current) {\n      lastSelectedNode.current = id;\n    }\n\n    const start = lastSelectionWasRange.current ? lastSelectedNode.current : id;\n    selectRange(event, {\n      start,\n      end: getLastNode()\n    });\n  };\n\n  const selectNextNode = (event, id) => {\n    if (!isDisabled(getNextNode(id))) {\n      selectRange(event, {\n        end: getNextNode(id),\n        current: id\n      }, true);\n    }\n  };\n\n  const selectPreviousNode = (event, id) => {\n    if (!isDisabled(getPreviousNode(id))) {\n      selectRange(event, {\n        end: getPreviousNode(id),\n        current: id\n      }, true);\n    }\n  };\n\n  const selectAllNodes = event => {\n    selectRange(event, {\n      start: getFirstNode(),\n      end: getLastNode()\n    });\n  };\n  /*\n   * Mapping Helpers\n   */\n\n\n  const registerNode = React.useCallback(node => {\n    const {\n      id,\n      index,\n      parentId,\n      expandable,\n      idAttribute,\n      disabled\n    } = node;\n    nodeMap.current[id] = {\n      id,\n      index,\n      parentId,\n      expandable,\n      idAttribute,\n      disabled\n    };\n  }, []);\n  const unregisterNode = React.useCallback(id => {\n    const newMap = _extends({}, nodeMap.current);\n\n    delete newMap[id];\n    nodeMap.current = newMap;\n    setFocusedNodeId(oldFocusedNodeId => {\n      if (oldFocusedNodeId === id && treeRef.current === ownerDocument(treeRef.current).activeElement) {\n        return getChildrenIds(null)[0];\n      }\n\n      return oldFocusedNodeId;\n    });\n  }, []);\n  const mapFirstChar = React.useCallback((id, firstChar) => {\n    firstCharMap.current[id] = firstChar;\n  }, []);\n  const unMapFirstChar = React.useCallback(id => {\n    const newMap = _extends({}, firstCharMap.current);\n\n    delete newMap[id];\n    firstCharMap.current = newMap;\n  }, []);\n  /**\n   * Event handlers and Navigation\n   */\n\n  const handleNextArrow = event => {\n    if (isExpandable(focusedNodeId)) {\n      if (isExpanded(focusedNodeId)) {\n        focusNextNode(event, focusedNodeId);\n      } else if (!isDisabled(focusedNodeId)) {\n        toggleExpansion(event);\n      }\n    }\n\n    return true;\n  };\n\n  const handlePreviousArrow = event => {\n    if (isExpanded(focusedNodeId) && !isDisabled(focusedNodeId)) {\n      toggleExpansion(event, focusedNodeId);\n      return true;\n    }\n\n    const parent = getParent(focusedNodeId);\n\n    if (parent) {\n      focus(event, parent);\n      return true;\n    }\n\n    return false;\n  };\n\n  const handleKeyDown = event => {\n    let flag = false;\n    const key = event.key; // If the tree is empty there will be no focused node\n\n    if (event.altKey || event.currentTarget !== event.target || !focusedNodeId) {\n      return;\n    }\n\n    const ctrlPressed = event.ctrlKey || event.metaKey;\n\n    switch (key) {\n      case ' ':\n        if (!disableSelection && !isDisabled(focusedNodeId)) {\n          if (multiSelect && event.shiftKey) {\n            selectRange(event, {\n              end: focusedNodeId\n            });\n            flag = true;\n          } else if (multiSelect) {\n            flag = selectNode(event, focusedNodeId, true);\n          } else {\n            flag = selectNode(event, focusedNodeId);\n          }\n        }\n\n        event.stopPropagation();\n        break;\n\n      case 'Enter':\n        if (!isDisabled(focusedNodeId)) {\n          if (isExpandable(focusedNodeId)) {\n            toggleExpansion(event);\n            flag = true;\n          }\n        }\n\n        event.stopPropagation();\n        break;\n\n      case 'ArrowDown':\n        if (multiSelect && event.shiftKey && !disableSelection) {\n          selectNextNode(event, focusedNodeId);\n        }\n\n        focusNextNode(event, focusedNodeId);\n        flag = true;\n        break;\n\n      case 'ArrowUp':\n        if (multiSelect && event.shiftKey && !disableSelection) {\n          selectPreviousNode(event, focusedNodeId);\n        }\n\n        focusPreviousNode(event, focusedNodeId);\n        flag = true;\n        break;\n\n      case 'ArrowRight':\n        if (isRtl) {\n          flag = handlePreviousArrow(event);\n        } else {\n          flag = handleNextArrow(event);\n        }\n\n        break;\n\n      case 'ArrowLeft':\n        if (isRtl) {\n          flag = handleNextArrow(event);\n        } else {\n          flag = handlePreviousArrow(event);\n        }\n\n        break;\n\n      case 'Home':\n        if (multiSelect && ctrlPressed && event.shiftKey && !disableSelection && !isDisabled(focusedNodeId)) {\n          rangeSelectToFirst(event, focusedNodeId);\n        }\n\n        focusFirstNode(event);\n        flag = true;\n        break;\n\n      case 'End':\n        if (multiSelect && ctrlPressed && event.shiftKey && !disableSelection && !isDisabled(focusedNodeId)) {\n          rangeSelectToLast(event, focusedNodeId);\n        }\n\n        focusLastNode(event);\n        flag = true;\n        break;\n\n      default:\n        if (key === '*') {\n          expandAllSiblings(event, focusedNodeId);\n          flag = true;\n        } else if (multiSelect && ctrlPressed && key.toLowerCase() === 'a' && !disableSelection) {\n          selectAllNodes(event);\n          flag = true;\n        } else if (!ctrlPressed && !event.shiftKey && isPrintableCharacter(key)) {\n          focusByFirstCharacter(event, focusedNodeId, key);\n          flag = true;\n        }\n\n    }\n\n    if (flag) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n  };\n\n  const handleFocus = event => {\n    // if the event bubbled (which is React specific) we don't want to steal focus\n    if (event.target === event.currentTarget) {\n      const firstSelected = Array.isArray(selected) ? selected[0] : selected;\n      focus(event, firstSelected || getNavigableChildrenIds(null)[0]);\n    }\n\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n\n  const handleBlur = event => {\n    setFocusedNodeId(null);\n\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n\n  const activeDescendant = nodeMap.current[focusedNodeId] ? nodeMap.current[focusedNodeId].idAttribute : null;\n  return /*#__PURE__*/_jsx(TreeViewContext.Provider, {\n    value: {\n      icons: {\n        defaultCollapseIcon,\n        defaultExpandIcon,\n        defaultParentIcon,\n        defaultEndIcon\n      },\n      focus,\n      toggleExpansion,\n      isExpanded,\n      isExpandable,\n      isFocused,\n      isSelected,\n      isDisabled,\n      selectNode: disableSelection ? noopSelection : selectNode,\n      selectRange: disableSelection ? noopSelection : selectRange,\n      multiSelect,\n      disabledItemsFocusable,\n      mapFirstChar,\n      unMapFirstChar,\n      registerNode,\n      unregisterNode,\n      treeId\n    },\n    children: /*#__PURE__*/_jsx(DescendantProvider, {\n      children: /*#__PURE__*/_jsx(TreeViewRoot, _extends({\n        role: \"tree\",\n        id: treeId,\n        \"aria-activedescendant\": activeDescendant,\n        \"aria-multiselectable\": multiSelect,\n        className: clsx(classes.root, className),\n        ref: handleRef,\n        tabIndex: 0,\n        onKeyDown: handleKeyDown,\n        onFocus: handleFocus,\n        onBlur: handleBlur,\n        ownerState: ownerState\n      }, other, {\n        children: children\n      }))\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TreeView.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The default icon used to collapse the node.\n   */\n  defaultCollapseIcon: PropTypes.node,\n\n  /**\n   * The default icon displayed next to a end node. This is applied to all\n   * tree nodes and can be overridden by the TreeItem `icon` prop.\n   */\n  defaultEndIcon: PropTypes.node,\n\n  /**\n   * Expanded node ids. (Uncontrolled)\n   * @default []\n   */\n  defaultExpanded: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * The default icon used to expand the node.\n   */\n  defaultExpandIcon: PropTypes.node,\n\n  /**\n   * The default icon displayed next to a parent node. This is applied to all\n   * parent nodes and can be overridden by the TreeItem `icon` prop.\n   */\n  defaultParentIcon: PropTypes.node,\n\n  /**\n   * Selected node ids. (Uncontrolled)\n   * When `multiSelect` is true this takes an array of strings; when false (default) a string.\n   * @default []\n   */\n  defaultSelected: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string]),\n\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n\n  /**\n   * If `true` selection is disabled.\n   * @default false\n   */\n  disableSelection: PropTypes.bool,\n\n  /**\n   * Expanded node ids. (Controlled)\n   */\n  expanded: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide this prop. It falls back to a randomly generated id.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If true `ctrl` and `shift` will trigger multiselect.\n   * @default false\n   */\n  multiSelect: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * Callback fired when tree items are focused.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback **Warning**: This is a generic event not a focus event.\n   * @param {string} value of the focused node.\n   */\n  onNodeFocus: PropTypes.func,\n\n  /**\n   * Callback fired when tree items are selected/unselected.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback\n   * @param {string[] | string} nodeIds Ids of the selected nodes. When `multiSelect` is true\n   * this is an array of strings; when false (default) a string.\n   */\n  onNodeSelect: PropTypes.func,\n\n  /**\n   * Callback fired when tree items are expanded/collapsed.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {array} nodeIds The ids of the expanded nodes.\n   */\n  onNodeToggle: PropTypes.func,\n\n  /**\n   * Selected node ids. (Controlled)\n   * When `multiSelect` is true this takes an array of strings; when false (default) a string.\n   */\n  selected: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string]),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default TreeView;"],"sourceRoot":""}