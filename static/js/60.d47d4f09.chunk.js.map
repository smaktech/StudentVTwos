{"version":3,"sources":["../node_modules/@mui/lab/Masonry/masonryClasses.js","../node_modules/@mui/lab/Masonry/Masonry.js","components/TextMaxLine.js","pages/overview/extra/TextMax.js"],"names":["getMasonryUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","parseToNumber","val","Number","replace","MasonryRoot","styled","name","overridesResolver","props","styles","root","ownerState","theme","width","display","flexFlow","alignContent","boxSizing","stylesSSR","isSSR","orderStyleSSR","defaultSpacing","spacing","i","defaultColumns","order","height","defaultHeight","margin","_extends","toFixed","spacingValues","resolveBreakpointValues","values","breakpoints","transformer","createUnarySpacing","deepmerge","handleBreakpoints","propValue","themeSpacingValue","getValue","maxColumnHeight","Math","ceil","columnValues","columns","columnValue","breakpoint","lastBreakpoint","Object","keys","pop","column","Masonry","React","inProps","ref","useThemeProps","children","className","component","other","_objectWithoutPropertiesLoose","masonryRef","setMaxColumnHeight","undefined","numberOfLineBreaks","setNumberOfLineBreaks","classes","composeClasses","useUtilityClasses","observer","ResizeObserver","elements","masonry","masonryFirstChild","parentWidth","childWidth","_elements$","_masonryFirstChild","_masonryFirstChild$co","_masonryFirstChild2","_elements$2","_masonry$contentRect","target","includes","contentRect","firstChild","clientWidth","parentElement","firstChildComputedStyle","window","getComputedStyle","firstChildMarginLeft","marginLeft","firstChildMarginRight","marginRight","currentNumberOfColumns","round","columnHeights","Array","fill","skip","childNodes","forEach","child","nodeType","Node","ELEMENT_NODE","dataset","class","childComputedStyle","childMarginTop","marginTop","childMarginBottom","marginBottom","childHeight","length","nestedChild","tagName","clientHeight","currentMinColumnIndex","indexOf","min","style","max","resizeObserver","current","container","observe","disconnect","handleRef","useForkRef","lineBreakStyle","flexBasis","padding","lineBreaks","map","_","index","_jsx","_jsxs","as","clsx","TextMaxLine","forwardRef","asLink","variant","line","persistent","sx","lineHeight","GetFontValue","overflow","textOverflow","WebkitLineClamp","WebkitBoxOrient","color","RootStyle","paddingTop","paddingBottom","TextMax","title","pt","pb","mb","bgcolor","palette","mode","heading","links","href","PATH_PAGE","components","maxWidth"],"mappings":"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","file":"static/js/60.d47d4f09.chunk.js","sourcesContent":["import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getMasonryUtilityClass(slot) {\n  return generateUtilityClass('MuiMasonry', slot);\n}\nconst masonryClasses = generateUtilityClasses('MuiMasonry', ['root']);\nexport default masonryClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"children\", \"className\", \"component\", \"columns\", \"spacing\", \"defaultColumns\", \"defaultHeight\", \"defaultSpacing\"];\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport { createUnarySpacing, getValue, handleBreakpoints, unstable_resolveBreakpointValues as resolveBreakpointValues } from '@mui/system';\nimport { deepmerge, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { getMasonryUtilityClass } from './masonryClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const parseToNumber = val => {\n  return Number(val.replace('px', ''));\n};\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getMasonryUtilityClass, classes);\n};\n\nexport const getStyle = ({\n  ownerState,\n  theme\n}) => {\n  let styles = {\n    width: '100%',\n    display: 'flex',\n    flexFlow: 'column wrap',\n    alignContent: 'space-between',\n    boxSizing: 'border-box',\n    '& > *': {\n      boxSizing: 'border-box'\n    }\n  };\n  const stylesSSR = {};\n\n  if (ownerState.isSSR) {\n    const orderStyleSSR = {};\n    const defaultSpacing = Number(theme.spacing(ownerState.defaultSpacing).replace('px', ''));\n\n    for (let i = 1; i <= ownerState.defaultColumns; i += 1) {\n      orderStyleSSR[`&:nth-of-type(${ownerState.defaultColumns}n+${i % ownerState.defaultColumns})`] = {\n        order: i\n      };\n    }\n\n    stylesSSR.height = ownerState.defaultHeight;\n    stylesSSR.margin = -(defaultSpacing / 2);\n    stylesSSR['& > *'] = _extends({}, styles['& > *'], orderStyleSSR, {\n      margin: defaultSpacing / 2,\n      width: `calc(${(100 / ownerState.defaultColumns).toFixed(2)}% - ${defaultSpacing}px)`\n    });\n    return _extends({}, styles, stylesSSR);\n  }\n\n  const spacingValues = resolveBreakpointValues({\n    values: ownerState.spacing,\n    breakpoints: theme.breakpoints.values\n  });\n  const transformer = createUnarySpacing(theme);\n\n  const spacingStyleFromPropValue = propValue => {\n    const themeSpacingValue = Number(propValue);\n    const spacing = Number(getValue(transformer, themeSpacingValue).replace('px', ''));\n    return _extends({\n      margin: -(spacing / 2),\n      '& > *': {\n        margin: spacing / 2\n      }\n    }, ownerState.maxColumnHeight && {\n      height: Math.ceil(ownerState.maxColumnHeight + spacing)\n    });\n  };\n\n  styles = deepmerge(styles, handleBreakpoints({\n    theme\n  }, spacingValues, spacingStyleFromPropValue));\n  const columnValues = resolveBreakpointValues({\n    values: ownerState.columns,\n    breakpoints: theme.breakpoints.values\n  });\n\n  const columnStyleFromPropValue = propValue => {\n    const columnValue = Number(propValue);\n    const width = `${(100 / columnValue).toFixed(2)}%`;\n    const spacing = typeof spacingValues !== 'object' ? getValue(transformer, Number(spacingValues)) : '0px';\n    return {\n      '& > *': {\n        width: `calc(${width} - ${spacing})`\n      }\n    };\n  };\n\n  styles = deepmerge(styles, handleBreakpoints({\n    theme\n  }, columnValues, columnStyleFromPropValue)); // configure width for responsive spacing values\n\n  if (typeof spacingValues === 'object') {\n    styles = deepmerge(styles, handleBreakpoints({\n      theme\n    }, spacingValues, (propValue, breakpoint) => {\n      if (breakpoint) {\n        const themeSpacingValue = Number(propValue);\n        const lastBreakpoint = Object.keys(columnValues).pop();\n        const spacing = getValue(transformer, themeSpacingValue);\n        const column = typeof columnValues === 'object' ? columnValues[breakpoint] || columnValues[lastBreakpoint] : columnValues;\n        const width = `${(100 / column).toFixed(2)}%`;\n        return {\n          '& > *': {\n            width: `calc(${width} - ${spacing})`\n          }\n        };\n      }\n\n      return null;\n    }));\n  }\n\n  return styles;\n};\nconst MasonryRoot = styled('div', {\n  name: 'MuiMasonry',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    return [styles.root];\n  }\n})(getStyle);\nconst Masonry = /*#__PURE__*/React.forwardRef(function Masonry(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiMasonry'\n  });\n\n  const {\n    children,\n    className,\n    component = 'div',\n    columns = 4,\n    spacing = 1,\n    defaultColumns,\n    defaultHeight,\n    defaultSpacing\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const masonryRef = React.useRef();\n  const [maxColumnHeight, setMaxColumnHeight] = React.useState();\n  const isSSR = !maxColumnHeight && defaultHeight && defaultColumns !== undefined && defaultSpacing !== undefined;\n  const [numberOfLineBreaks, setNumberOfLineBreaks] = React.useState(isSSR ? defaultColumns - 1 : 0);\n\n  const ownerState = _extends({}, props, {\n    spacing,\n    columns,\n    maxColumnHeight,\n    defaultColumns,\n    defaultHeight,\n    defaultSpacing,\n    isSSR\n  });\n\n  const classes = useUtilityClasses(ownerState);\n\n  const handleResize = elements => {\n    if (!elements) {\n      return;\n    }\n\n    let masonry;\n    let masonryFirstChild;\n    let parentWidth;\n    let childWidth;\n\n    if (elements[0].target.className.includes(classes.root)) {\n      var _elements$, _masonryFirstChild, _masonryFirstChild$co, _masonryFirstChild2;\n\n      masonry = elements[0].target;\n      parentWidth = elements[0].contentRect.width;\n      masonryFirstChild = ((_elements$ = elements[1]) == null ? void 0 : _elements$.target) || masonry.firstChild;\n      childWidth = ((_masonryFirstChild = masonryFirstChild) == null ? void 0 : (_masonryFirstChild$co = _masonryFirstChild.contentRect) == null ? void 0 : _masonryFirstChild$co.width) || ((_masonryFirstChild2 = masonryFirstChild) == null ? void 0 : _masonryFirstChild2.clientWidth) || 0;\n    } else {\n      var _elements$2, _masonry$contentRect;\n\n      masonryFirstChild = elements[0].target;\n      childWidth = elements[0].contentRect.width;\n      masonry = ((_elements$2 = elements[1]) == null ? void 0 : _elements$2.target) || masonryFirstChild.parentElement;\n      parentWidth = ((_masonry$contentRect = masonry.contentRect) == null ? void 0 : _masonry$contentRect.width) || masonry.clientWidth;\n    }\n\n    if (parentWidth === 0 || childWidth === 0 || !masonry || !masonryFirstChild) {\n      return;\n    }\n\n    const firstChildComputedStyle = window.getComputedStyle(masonryFirstChild);\n    const firstChildMarginLeft = parseToNumber(firstChildComputedStyle.marginLeft);\n    const firstChildMarginRight = parseToNumber(firstChildComputedStyle.marginRight);\n    const currentNumberOfColumns = Math.round(parentWidth / (childWidth + firstChildMarginLeft + firstChildMarginRight));\n    const columnHeights = new Array(currentNumberOfColumns).fill(0);\n    let skip = false;\n    masonry.childNodes.forEach(child => {\n      if (child.nodeType !== Node.ELEMENT_NODE || child.dataset.class === 'line-break' || skip) {\n        return;\n      }\n\n      const childComputedStyle = window.getComputedStyle(child);\n      const childMarginTop = parseToNumber(childComputedStyle.marginTop);\n      const childMarginBottom = parseToNumber(childComputedStyle.marginBottom); // if any one of children isn't rendered yet, masonry's height shouldn't be computed yet\n\n      const childHeight = parseToNumber(childComputedStyle.height) ? Math.ceil(parseToNumber(childComputedStyle.height)) + childMarginTop + childMarginBottom : 0;\n\n      if (childHeight === 0) {\n        skip = true;\n        return;\n      } // if there is a nested image that isn't rendered yet, masonry's height shouldn't be computed yet\n\n\n      for (let i = 0; i < child.childNodes.length; i += 1) {\n        const nestedChild = child.childNodes[i];\n\n        if (nestedChild.tagName === 'IMG' && nestedChild.clientHeight === 0) {\n          skip = true;\n          break;\n        }\n      }\n\n      if (!skip) {\n        // find the current shortest column (where the current item will be placed)\n        const currentMinColumnIndex = columnHeights.indexOf(Math.min(...columnHeights));\n        columnHeights[currentMinColumnIndex] += childHeight;\n        const order = currentMinColumnIndex + 1;\n        child.style.order = order;\n      }\n    });\n\n    if (!skip) {\n      setMaxColumnHeight(Math.max(...columnHeights));\n      const numOfLineBreaks = currentNumberOfColumns > 0 ? currentNumberOfColumns - 1 : 0;\n      setNumberOfLineBreaks(numOfLineBreaks);\n    }\n  };\n\n  const observer = React.useRef(typeof ResizeObserver === 'undefined' ? undefined : new ResizeObserver(handleResize));\n  React.useEffect(() => {\n    const resizeObserver = observer.current; // IE and old browsers are not supported\n\n    if (resizeObserver === undefined) {\n      return undefined;\n    }\n\n    const container = masonryRef.current;\n\n    if (container && resizeObserver) {\n      // only the masonry container and its first child are observed for resizing;\n      // this might cause unforeseen problems in some use cases;\n      resizeObserver.observe(container);\n\n      if (container.firstChild) {\n        resizeObserver.observe(container.firstChild);\n      }\n    }\n\n    return () => resizeObserver ? resizeObserver.disconnect() : {};\n  }, [columns, spacing, children]);\n  const handleRef = useForkRef(ref, masonryRef);\n  const lineBreakStyle = {\n    flexBasis: '100%',\n    width: 0,\n    margin: 0,\n    padding: 0\n  }; //  columns are likely to have different heights and hence can start to merge;\n  //  a line break at the end of each column prevents columns from merging\n\n  const lineBreaks = new Array(numberOfLineBreaks).fill('').map((_, index) => /*#__PURE__*/_jsx(\"span\", {\n    \"data-class\": \"line-break\",\n    style: _extends({}, lineBreakStyle, {\n      order: index + 1\n    })\n  }, index));\n  return /*#__PURE__*/_jsxs(MasonryRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ref: handleRef,\n    ownerState: ownerState\n  }, other, {\n    children: [children, lineBreaks]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Masonry.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Number of columns.\n   * @default 4\n   */\n  columns: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The default number of columns of the component. This is provided for server-side rendering.\n   */\n  defaultColumns: PropTypes.number,\n\n  /**\n   * The default height of the component in px. This is provided for server-side rendering.\n   */\n  defaultHeight: PropTypes.number,\n\n  /**\n   * The default spacing of the component. Like `spacing`, it is a factor of the theme's spacing. This is provided for server-side rendering.\n   */\n  defaultSpacing: PropTypes.number,\n\n  /**\n   * Defines the space between children. It is a factor of the theme's spacing.\n   * @default 1\n   */\n  spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * Allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Masonry;","import PropTypes from 'prop-types';\nimport { forwardRef } from 'react';\n// @mui\nimport { Typography, Link } from '@mui/material';\n// utils\nimport GetFontValue from '../utils/getFontValue';\n\n// ----------------------------------------------------------------------\n\nconst TextMaxLine = forwardRef(\n  ({ asLink, variant = 'body1', line = 2, persistent = false, children, sx, ...other }, ref) => {\n    const { lineHeight } = GetFontValue(variant);\n\n    const style = {\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      display: '-webkit-box',\n      WebkitLineClamp: line,\n      WebkitBoxOrient: 'vertical',\n      ...(persistent && {\n        height: lineHeight * line,\n      }),\n      ...sx,\n    };\n\n    if (asLink) {\n      return (\n        <Link color=\"inherit\" ref={ref} variant={variant} sx={{ ...style }} {...other}>\n          {children}\n        </Link>\n      );\n    }\n\n    return (\n      <Typography ref={ref} variant={variant} sx={{ ...style }} {...other}>\n        {children}\n      </Typography>\n    );\n  }\n);\n\nTextMaxLine.propTypes = {\n  asLink: PropTypes.bool,\n  children: PropTypes.node.isRequired,\n  line: PropTypes.number,\n  persistent: PropTypes.bool,\n  sx: PropTypes.object,\n  variant: PropTypes.oneOf([\n    'body1',\n    'body2',\n    'button',\n    'caption',\n    'h1',\n    'h2',\n    'h3',\n    'h4',\n    'h5',\n    'h6',\n    'inherit',\n    'overline',\n    'subtitle1',\n    'subtitle2',\n  ]),\n};\n\nexport default TextMaxLine;\n","// @mui\nimport Masonry from '@mui/lab/Masonry';\nimport { styled } from '@mui/material/styles';\nimport { Box, Card, CardHeader, Container, CardContent } from '@mui/material';\n// routes\nimport { PATH_PAGE } from '../../../routes/paths';\n// components\nimport Page from '../../../components/Page';\nimport TextMaxLine from '../../../components/TextMaxLine';\nimport HeaderBreadcrumbs from '../../../components/HeaderBreadcrumbs';\n\n// ----------------------------------------------------------------------\n\nconst RootStyle = styled('div')(({ theme }) => ({\n  paddingTop: theme.spacing(11),\n  paddingBottom: theme.spacing(15),\n}));\n\n// ----------------------------------------------------------------------\n\nexport default function TextMax() {\n  return (\n    <Page title=\"Components: TextMaxLine\">\n      <RootStyle>\n        <Box\n          sx={{\n            pt: 6,\n            pb: 1,\n            mb: 10,\n            bgcolor: (theme) => (theme.palette.mode === 'light' ? 'grey.200' : 'grey.800'),\n          }}\n        >\n          <Container>\n            <HeaderBreadcrumbs\n              heading=\"TextMaxLine\"\n              links={[{ name: 'Components', href: PATH_PAGE.components }, { name: 'TextMaxLine' }]}\n            />\n          </Container>\n        </Box>\n\n        <Container>\n          <Masonry columns={3} spacing={3}>\n            <Card>\n              <CardHeader title=\"1 Line\" />\n              <CardContent>\n                <TextMaxLine line={1}>\n                  Donec posuere vulputate arcu. Fusce vulputate eleifend sapien. Phasellus magna. Proin sapien ipsum,\n                  porta a, auctor quis, euismod ut, mi. Suspendisse faucibus, nunc et pellentesque egestas, lacus ante\n                  convallis tellus, vitae iaculis lacus elit id tortor.\n                </TextMaxLine>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader title=\"2 Line\" />\n              <CardContent>\n                <TextMaxLine>\n                  Donec posuere vulputate arcu. Fusce vulputate eleifend sapien. Phasellus magna. Proin sapien ipsum,\n                  porta a, auctor quis, euismod ut, mi. Suspendisse faucibus, nunc et pellentesque egestas, lacus ante\n                  convallis tellus, vitae iaculis lacus elit id tortor.\n                </TextMaxLine>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader title=\"3 Line\" />\n              <CardContent>\n                <TextMaxLine line={3}>\n                  Donec posuere vulputate arcu. Fusce vulputate eleifend sapien. Phasellus magna. Proin sapien ipsum,\n                  porta a, auctor quis, euismod ut, mi. Suspendisse faucibus, nunc et pellentesque egestas, lacus ante\n                  convallis tellus, vitae iaculis lacus elit id tortor.\n                </TextMaxLine>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader title=\"4 Line\" />\n              <CardContent>\n                <TextMaxLine line={4}>\n                  Donec posuere vulputate arcu. Fusce vulputate eleifend sapien. Phasellus magna. Proin sapien ipsum,\n                  porta a, auctor quis, euismod ut, mi. Suspendisse faucibus, nunc et pellentesque egestas, lacus ante\n                  convallis tellus, vitae iaculis lacus elit id tortor.\n                </TextMaxLine>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader title=\"As Link\" />\n              <CardContent>\n                <TextMaxLine asLink line={3} href=\"#\" color=\"primary\" sx={{ maxWidth: 300 }}>\n                  Donec posuere vulputate arcu. Fusce vulputate eleifend sapien. Phasellus magna. Proin sapien ipsum,\n                  porta a, auctor quis, euismod ut, mi. Suspendisse faucibus, nunc et pellentesque egestas, lacus ante\n                  convallis tellus, vitae iaculis lacus elit id tortor.\n                </TextMaxLine>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader title=\"Persistent\" />\n              <CardContent>\n                <TextMaxLine persistent line={3} href=\"#\" sx={{ bgcolor: 'background.neutral' }}>\n                  Donec posuere vulputate arcu.\n                </TextMaxLine>\n              </CardContent>\n            </Card>\n          </Masonry>\n        </Container>\n      </RootStyle>\n    </Page>\n  );\n}\n"],"sourceRoot":""}