{"version":3,"sources":["pages/overview/mui/table/BasicTable.js","pages/overview/mui/table/collapsible-table/CollapsibleTableRow.js","pages/overview/mui/table/collapsible-table/index.js","pages/overview/mui/table/sorting-selecting/SortingSelectingHead.js","pages/overview/mui/table/sorting-selecting/SortingSelectingToolbar.js","pages/overview/mui/table/sorting-selecting/index.js","pages/overview/mui/table/GroupingFixedHeader.js","pages/overview/mui/table/index.js"],"names":["createData","name","calories","fat","carbs","protein","BASIC_TABLE","BasicTable","Scrollbar","TableContainer","sx","minWidth","mt","Table","TableHead","TableRow","TableCell","align","TableBody","map","row","component","scope","CollapsibleTableRow","props","useState","open","setOpen","IconButton","size","onClick","Iconify","icon","style","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","Box","margin","Typography","variant","gutterBottom","history","historyRow","date","customerId","amount","Math","round","price","COLLAPSIBLE_TABLE","CollapsibleTable","visuallyHidden","border","clip","height","overflow","padding","position","whiteSpace","width","SortingSelectingHead","order","orderBy","rowCount","headLabel","numSelected","onRequestSort","onSelectAllClick","Checkbox","indeterminate","checked","onChange","event","target","inputProps","headCell","numeric","disablePadding","sortDirection","id","TableSortLabel","active","direction","label","RootStyle","styled","Toolbar","display","justifyContent","theme","spacing","SortingSelectingToolbar","isLight","useTheme","palette","mode","color","bgcolor","Tooltip","title","SORTING_SELECTING_TABLE","TABLE_HEAD","descendingComparator","a","b","getComparator","stableSort","array","comparator","stabilizedThis","el","index","sort","SortingSelecting","setOrder","setOrderBy","selected","setSelected","page","setPage","dense","setDense","rowsPerPage","setRowsPerPage","emptyRows","max","length","property","newSelecteds","n","slice","isItemSelected","indexOf","labelId","hover","selectedIndex","newSelected","concat","handleClick","role","tabIndex","TablePagination","rowsPerPageOptions","count","onPageChange","e","onRowsPerPageChange","parseInt","value","px","py","top","md","FormControlLabel","control","Switch","code","population","density","GROUPING_TABLE","COLUMNS","format","toLocaleString","toFixed","GroupingFixedHeader","maxHeight","stickyHeader","background","paper","column","newPage","TableComponent","Page","pt","pb","mb","Container","HeaderBreadcrumbs","heading","links","href","PATH_PAGE","components","moreLink","Stack","Card","CardHeader"],"mappings":"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","file":"static/js/128.10f5eb97.chunk.js","sourcesContent":["// @mui\nimport { Table, TableRow, TableHead, TableBody, TableCell, TableContainer } from '@mui/material';\n// components\nimport Scrollbar from '../../../../components/Scrollbar';\n\n// ----------------------------------------------------------------------\n\nfunction createData(name, calories, fat, carbs, protein) {\n  return { name, calories, fat, carbs, protein };\n}\n\nconst BASIC_TABLE = [\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n  createData('Eclair', 262, 16.0, 24, 6.0),\n  createData('Cupcake', 305, 3.7, 67, 4.3),\n  createData('Gingerbread', 356, 16.0, 49, 3.9),\n];\n\n// ----------------------------------------------------------------------\n\nexport default function BasicTable() {\n  return (\n    <Scrollbar>\n      <TableContainer sx={{ minWidth: 800, mt: 3 }}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Dessert (100g serving)</TableCell>\n              <TableCell align=\"right\">Calories</TableCell>\n              <TableCell align=\"right\">Fat&nbsp;(g)</TableCell>\n              <TableCell align=\"right\">Carbs&nbsp;(g)</TableCell>\n              <TableCell align=\"right\">Protein&nbsp;(g)</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {BASIC_TABLE.map((row) => (\n              <TableRow key={row.name}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {row.name}\n                </TableCell>\n                <TableCell align=\"right\">{row.calories}</TableCell>\n                <TableCell align=\"right\">{row.fat}</TableCell>\n                <TableCell align=\"right\">{row.carbs}</TableCell>\n                <TableCell align=\"right\">{row.protein}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Scrollbar>\n  );\n}\n","import PropTypes from 'prop-types';\nimport { useState } from 'react';\n// @mui\nimport { Box, Table, Collapse, TableRow, TableHead, TableBody, TableCell, Typography, IconButton } from '@mui/material';\n// components\nimport Iconify from '../../../../../components/Iconify';\n\n// ----------------------------------------------------------------------\n\nCollapsibleTableRow.propTypes = {\n  row: PropTypes.shape({\n    calories: PropTypes.number.isRequired,\n    carbs: PropTypes.number.isRequired,\n    fat: PropTypes.number.isRequired,\n    history: PropTypes.arrayOf(\n      PropTypes.shape({\n        amount: PropTypes.number.isRequired,\n        customerId: PropTypes.string.isRequired,\n        date: PropTypes.string.isRequired,\n      })\n    ).isRequired,\n    name: PropTypes.string.isRequired,\n    price: PropTypes.number.isRequired,\n    protein: PropTypes.number.isRequired,\n  }).isRequired,\n};\n\nexport default function CollapsibleTableRow(props) {\n  const { row } = props;\n\n  const [open, setOpen] = useState(false);\n\n  return (\n    <>\n      <TableRow>\n        <TableCell>\n          <IconButton size=\"small\" onClick={() => setOpen(!open)}>\n            <Iconify icon={open ? 'eva:arrow-ios-upward-fill' : 'eva:arrow-ios-downward-fill'} />\n          </IconButton>\n        </TableCell>\n        <TableCell component=\"th\" scope=\"row\">\n          {row.name}\n        </TableCell>\n        <TableCell align=\"right\">{row.calories}</TableCell>\n        <TableCell align=\"right\">{row.fat}</TableCell>\n        <TableCell align=\"right\">{row.carbs}</TableCell>\n        <TableCell align=\"right\">{row.protein}</TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\n            <Box sx={{ margin: 1 }}>\n              <Typography variant=\"h6\" gutterBottom component=\"div\">\n                History\n              </Typography>\n              <Table size=\"small\" aria-label=\"purchases\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Date</TableCell>\n                    <TableCell>Customer</TableCell>\n                    <TableCell align=\"right\">Amount</TableCell>\n                    <TableCell align=\"right\">Total price ($)</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {row.history.map((historyRow) => (\n                    <TableRow key={historyRow.date}>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {historyRow.date}\n                      </TableCell>\n                      <TableCell>{historyRow.customerId}</TableCell>\n                      <TableCell align=\"right\">{historyRow.amount}</TableCell>\n                      <TableCell align=\"right\">{Math.round(historyRow.amount * row.price * 100) / 100}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </Box>\n          </Collapse>\n        </TableCell>\n      </TableRow>\n    </>\n  );\n}\n","// @mui\nimport { Table, TableRow, TableHead, TableBody, TableCell, TableContainer } from '@mui/material';\n// components\nimport Scrollbar from '../../../../../components/Scrollbar';\n//\nimport CollapsibleTableRow from './CollapsibleTableRow';\n\n// ----------------------------------------------------------------------\n\nexport function createData(name, calories, fat, carbs, protein, price) {\n  return {\n    name,\n    calories,\n    fat,\n    carbs,\n    protein,\n    price,\n    history: [\n      {\n        date: '2020-01-05',\n        customerId: '11091700',\n        amount: 3,\n      },\n      {\n        date: '2020-01-02',\n        customerId: 'Anonymous',\n        amount: 1,\n      },\n    ],\n  };\n}\n\nconst COLLAPSIBLE_TABLE = [\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0, 3.99),\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3, 4.99),\n  createData('Eclair', 262, 16.0, 24, 6.0, 3.79),\n  createData('Cupcake', 305, 3.7, 67, 4.3, 2.5),\n  createData('Gingerbread', 356, 16.0, 49, 3.9, 1.5),\n];\n\nexport default function CollapsibleTable() {\n  return (\n    <Scrollbar>\n      <TableContainer sx={{ minWidth: 800, mt: 3 }}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell />\n              <TableCell>Dessert (100g serving)</TableCell>\n              <TableCell align=\"right\">Calories</TableCell>\n              <TableCell align=\"right\">Fat&nbsp;(g)</TableCell>\n              <TableCell align=\"right\">Carbs&nbsp;(g)</TableCell>\n              <TableCell align=\"right\">Protein&nbsp;(g)</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {COLLAPSIBLE_TABLE.map((row) => (\n              <CollapsibleTableRow key={row.name} row={row} />\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Scrollbar>\n  );\n}\n","import PropTypes from 'prop-types';\n// @mui\nimport { Box, Checkbox, TableRow, TableCell, TableHead, TableSortLabel } from '@mui/material';\n\n// ----------------------------------------------------------------------\n\nconst visuallyHidden = {\n  border: 0,\n  clip: 'rect(0 0 0 0)',\n  height: '1px',\n  margin: -1,\n  overflow: 'hidden',\n  padding: 0,\n  position: 'absolute',\n  whiteSpace: 'nowrap',\n  width: '1px',\n};\n\nSortingSelectingHead.propTypes = {\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  headLabel: PropTypes.array.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n};\n\nexport default function SortingSelectingHead({\n  order,\n  orderBy,\n  rowCount,\n  headLabel,\n  numSelected,\n  onRequestSort,\n  onSelectAllClick,\n}) {\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n          <Checkbox\n            indeterminate={numSelected > 0 && numSelected < rowCount}\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={(event) => onSelectAllClick(event.target.checked)}\n            inputProps={{\n              'aria-label': 'select all desserts',\n            }}\n          />\n        </TableCell>\n        {headLabel.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'normal'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={() => onRequestSort(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <Box component=\"span\" sx={{ ...visuallyHidden }}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </Box>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n","import PropTypes from 'prop-types';\nimport { useTheme, styled } from '@mui/material/styles';\nimport { Toolbar, Tooltip, Typography, IconButton } from '@mui/material';\n// components\nimport Iconify from '../../../../../components/Iconify';\n\n// ----------------------------------------------------------------------\n\nconst RootStyle = styled(Toolbar)(({ theme }) => ({\n  height: 96,\n  display: 'flex',\n  justifyContent: 'space-between',\n  padding: theme.spacing(0, 1, 0, 3),\n}));\n\n// ----------------------------------------------------------------------\n\nSortingSelectingToolbar.propTypes = {\n  numSelected: PropTypes.number,\n};\n\nexport default function SortingSelectingToolbar({ numSelected }) {\n  const theme = useTheme();\n  const isLight = theme.palette.mode === 'light';\n\n  return (\n    <RootStyle\n      sx={{\n        ...(numSelected > 0 && {\n          color: isLight ? 'primary.main' : 'text.primary',\n          bgcolor: isLight ? 'primary.lighter' : 'primary.dark',\n        }),\n      }}\n    >\n      {numSelected > 0 ? (\n        <Typography color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography variant=\"h6\" id=\"tableTitle\" component=\"div\">\n          Sorting & Selecting\n        </Typography>\n      )}\n\n      {numSelected > 0 ? (\n        <Tooltip title=\"Delete\">\n          <IconButton>\n            <Iconify icon={'eva:trash-2-outline'} />\n          </IconButton>\n        </Tooltip>\n      ) : (\n        <Tooltip title=\"Filter list\">\n          <IconButton>\n            <Iconify icon={'ic:round-filter-list'} />\n          </IconButton>\n        </Tooltip>\n      )}\n    </RootStyle>\n  );\n}\n","import { useState } from 'react';\n// @mui\nimport {\n  Box,\n  Table,\n  Switch,\n  Checkbox,\n  TableRow,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TablePagination,\n  FormControlLabel,\n} from '@mui/material';\n// components\nimport Scrollbar from '../../../../../components/Scrollbar';\n//\nimport SortingSelectingHead from './SortingSelectingHead';\nimport SortingSelectingToolbar from './SortingSelectingToolbar';\n\n// ----------------------------------------------------------------------\n\nfunction createData(name, calories, fat, carbs, protein) {\n  return { name, calories, fat, carbs, protein };\n}\n\nconst SORTING_SELECTING_TABLE = [\n  createData('Cupcake', 305, 3.7, 67, 4.3),\n  createData('Donut', 452, 25.0, 51, 4.9),\n  createData('Eclair', 262, 16.0, 24, 6.0),\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n  createData('Gingerbread', 356, 16.0, 49, 3.9),\n  createData('Honeycomb', 408, 3.2, 87, 6.5),\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n  createData('Jelly Bean', 375, 0.0, 94, 0.0),\n  createData('KitKat', 518, 26.0, 65, 7.0),\n  createData('Lollipop', 392, 0.2, 98, 0.0),\n  createData('Marshmallow', 318, 0, 81, 2.0),\n  createData('Nougat', 360, 19.0, 9, 37.0),\n  createData('Oreo', 437, 18.0, 63, 4.0),\n];\n\nconst TABLE_HEAD = [\n  {\n    id: 'name',\n    numeric: false,\n    disablePadding: true,\n    label: 'Dessert (100g serving)',\n  },\n  {\n    id: 'calories',\n    numeric: true,\n    disablePadding: false,\n    label: 'Calories',\n  },\n  {\n    id: 'fat',\n    numeric: true,\n    disablePadding: false,\n    label: 'Fat (g)',\n  },\n  {\n    id: 'carbs',\n    numeric: true,\n    disablePadding: false,\n    label: 'Carbs (g)',\n  },\n  {\n    id: 'protein',\n    numeric: true,\n    disablePadding: false,\n    label: 'Protein (g)',\n  },\n];\n\n// ----------------------------------------------------------------------\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nexport default function SortingSelecting() {\n  const [order, setOrder] = useState('asc');\n  const [orderBy, setOrderBy] = useState('calories');\n  const [selected, setSelected] = useState([]);\n  const [page, setPage] = useState(0);\n  const [dense, setDense] = useState(false);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n\n  const handleRequestSort = (property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const handleSelectAllClick = (checked) => {\n    if (checked) {\n      const newSelecteds = SORTING_SELECTING_TABLE.map((n) => n.name);\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const handleClick = (name) => {\n    const selectedIndex = selected.indexOf(name);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, name);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));\n    }\n    setSelected(newSelected);\n  };\n\n  const handleChangePage = (newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const isSelected = (name) => selected.indexOf(name) !== -1;\n\n  // Avoid a layout jump when reaching the last page with empty SORTING_SELECTING_TABLE.\n  const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - SORTING_SELECTING_TABLE.length) : 0;\n\n  return (\n    <div>\n      <SortingSelectingToolbar numSelected={selected.length} />\n\n      <Scrollbar>\n        <TableContainer sx={{ minWidth: 800 }}>\n          <Table size={dense ? 'small' : 'medium'}>\n            <SortingSelectingHead\n              order={order}\n              orderBy={orderBy}\n              headLabel={TABLE_HEAD}\n              numSelected={selected.length}\n              onRequestSort={handleRequestSort}\n              rowCount={SORTING_SELECTING_TABLE.length}\n              onSelectAllClick={handleSelectAllClick}\n            />\n            <TableBody>\n              {stableSort(SORTING_SELECTING_TABLE, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row, index) => {\n                  const isItemSelected = isSelected(row.name);\n                  const labelId = `enhanced-table-checkbox-${index}`;\n\n                  return (\n                    <TableRow\n                      hover\n                      onClick={() => handleClick(row.name)}\n                      role=\"checkbox\"\n                      aria-checked={isItemSelected}\n                      tabIndex={-1}\n                      key={row.name}\n                      selected={isItemSelected}\n                    >\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox checked={isItemSelected} />\n                      </TableCell>\n                      <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n                        {row.name}\n                      </TableCell>\n                      <TableCell align=\"right\">{row.calories}</TableCell>\n                      <TableCell align=\"right\">{row.fat}</TableCell>\n                      <TableCell align=\"right\">{row.carbs}</TableCell>\n                      <TableCell align=\"right\">{row.protein}</TableCell>\n                    </TableRow>\n                  );\n                })}\n              {emptyRows > 0 && (\n                <TableRow\n                  style={{\n                    height: (dense ? 33 : 53) * emptyRows,\n                  }}\n                >\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Scrollbar>\n\n      <Box sx={{ position: 'relative' }}>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={SORTING_SELECTING_TABLE.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onPageChange={(e, page) => handleChangePage(page)}\n          onRowsPerPageChange={handleChangeRowsPerPage}\n        />\n        <Box\n          sx={{\n            px: 3,\n            py: 1.5,\n            top: 0,\n            position: { md: 'absolute' },\n          }}\n        >\n          <FormControlLabel\n            control={<Switch checked={dense} onChange={(event) => setDense(event.target.checked)} />}\n            label=\"Dense padding\"\n          />\n        </Box>\n      </Box>\n    </div>\n  );\n}\n","import { useState } from 'react';\n// @mui\nimport { Table, TableRow, TableHead, TableBody, TableCell, TableContainer, TablePagination } from '@mui/material';\n// components\nimport Scrollbar from '../../../../components/Scrollbar';\n\n// ----------------------------------------------------------------------\n\nfunction createData(name, code, population, size) {\n  const density = population / size;\n  return { name, code, population, size, density };\n}\n\nconst GROUPING_TABLE = [\n  createData('India', 'IN', 1324171354, 3287263),\n  createData('China', 'CN', 1403500365, 9596961),\n  createData('Italy', 'IT', 60483973, 301340),\n  createData('United States', 'US', 327167434, 9833520),\n  createData('Canada', 'CA', 37602103, 9984670),\n  createData('Australia', 'AU', 25475400, 7692024),\n  createData('Germany', 'DE', 83019200, 357578),\n  createData('Ireland', 'IE', 4857000, 70273),\n  createData('Mexico', 'MX', 126577691, 1972550),\n  createData('Japan', 'JP', 126317000, 377973),\n  createData('France', 'FR', 67022000, 640679),\n  createData('United Kingdom', 'GB', 67545757, 242495),\n  createData('Russia', 'RU', 146793744, 17098246),\n  createData('Nigeria', 'NG', 200962417, 923768),\n  createData('Brazil', 'BR', 210147125, 8515767),\n];\n\nconst COLUMNS = [\n  { id: 'name', label: 'Name', minWidth: 170 },\n  { id: 'code', label: 'ISO\\u00a0Code', minWidth: 100 },\n  {\n    id: 'population',\n    label: 'Population',\n    minWidth: 170,\n    align: 'right',\n    format: (value) => value.toLocaleString('en-US'),\n  },\n  {\n    id: 'size',\n    label: 'Size\\u00a0(km\\u00b2)',\n    minWidth: 170,\n    align: 'right',\n    format: (value) => value.toLocaleString('en-US'),\n  },\n  {\n    id: 'density',\n    label: 'Density',\n    minWidth: 170,\n    align: 'right',\n    format: (value) => value.toFixed(2),\n  },\n];\n\n// ----------------------------------------------------------------------\n\nexport default function GroupingFixedHeader() {\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  return (\n    <>\n      <Scrollbar>\n        <TableContainer sx={{ minWidth: 800, maxHeight: 400 }}>\n          <Table stickyHeader>\n            <TableHead>\n              <TableRow>\n                <TableCell\n                  align=\"center\"\n                  colSpan={2}\n                  sx={{\n                    background: (theme) => theme.palette.background.paper,\n                  }}\n                >\n                  Country\n                </TableCell>\n                <TableCell align=\"center\" colSpan={3} sx={{ background: (theme) => theme.palette.background.paper }}>\n                  Details\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                {COLUMNS.map((column) => (\n                  <TableCell key={column.id} align={column.align} style={{ top: 56, minWidth: column.minWidth }}>\n                    {column.label}\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n\n            <TableBody>\n              {GROUPING_TABLE.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => (\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\n                  {COLUMNS.map((column) => {\n                    const value = row[column.id];\n                    return (\n                      <TableCell key={column.id} align={column.align}>\n                        {column.format && typeof value === 'number' ? column.format(value) : value}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Scrollbar>\n\n      <TablePagination\n        page={page}\n        component=\"div\"\n        count={GROUPING_TABLE.length}\n        rowsPerPage={rowsPerPage}\n        onPageChange={handleChangePage}\n        rowsPerPageOptions={[10, 25, 100]}\n        onRowsPerPageChange={handleChangeRowsPerPage}\n      />\n    </>\n  );\n}\n","// @mui\nimport { styled } from '@mui/material/styles';\nimport { Box, Card, Container, CardHeader, Stack } from '@mui/material';\n// routes\nimport { PATH_PAGE } from '../../../../routes/paths';\n// components\nimport Page from '../../../../components/Page';\nimport HeaderBreadcrumbs from '../../../../components/HeaderBreadcrumbs';\n//\nimport BasicTable from './BasicTable';\nimport CollapsibleTable from './collapsible-table';\nimport SortingSelecting from './sorting-selecting';\nimport GroupingFixedHeader from './GroupingFixedHeader';\n\n// ----------------------------------------------------------------------\n\nconst RootStyle = styled('div')(({ theme }) => ({\n  paddingTop: theme.spacing(11),\n  paddingBottom: theme.spacing(15),\n}));\n\nexport default function TableComponent() {\n  return (\n    <Page title=\"Components: Table\">\n      <RootStyle>\n        <Box\n          sx={{\n            pt: 6,\n            pb: 1,\n            mb: 10,\n            bgcolor: (theme) => (theme.palette.mode === 'light' ? 'grey.200' : 'grey.800'),\n          }}\n        >\n          <Container>\n            <HeaderBreadcrumbs\n              heading=\"Table\"\n              links={[{ name: 'Components', href: PATH_PAGE.components }, { name: 'Table' }]}\n              moreLink=\"https://mui.com/components/tables\"\n            />\n          </Container>\n        </Box>\n\n        <Container>\n          <Stack spacing={3}>\n            <Card>\n              <CardHeader title=\"Basic Table\" />\n              <BasicTable />\n            </Card>\n\n            <Card>\n              <SortingSelecting />\n            </Card>\n\n            <Card>\n              <CardHeader title=\"Grouping & FixedHeader\" />\n              <GroupingFixedHeader />\n            </Card>\n\n            <Card>\n              <CardHeader title=\"Collapsible Table\" />\n              <CollapsibleTable />\n            </Card>\n          </Stack>\n        </Container>\n      </RootStyle>\n    </Page>\n  );\n}\n"],"sourceRoot":""}